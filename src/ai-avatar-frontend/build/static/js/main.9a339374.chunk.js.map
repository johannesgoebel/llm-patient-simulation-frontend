{"version":3,"sources":["pages/ChatWindow.js","App.js","reportWebVitals.js","index.js"],"names":["ChatWindow","messages","setMessages","useState","input","setInput","error","setError","vignette","setVignette","apiKey","setApiKey","handleButtonClick","async","url","concat","encodeURIComponent","name","response","fetch","method","ok","status","console","errorMessage","text","message","React","createElement","className","style","height","overflow","width","margin","type","onClick","htmlFor","id","placeholder","value","onChange","e","target","overflowY","border","padding","map","msg","index","renderMessage","isUser","user","key","maxWidth","headers","log","Error","data","json","answer","disabled","App","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","Router","basename"],"mappings":"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","file":"static/js/main.9a339374.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst ChatWindow = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState('');\r\n  const [error, setError] = useState(null);\r\n  const [vignette, setVignette] = useState('Astrid Seeger');\r\n  const [apiKey, setApiKey] = useState('');\r\n\r\n  const handleButtonClick = async (name) => {\r\n    try {\r\n        const url = `https://llm-patient-simulation-backend.vercel.app/conversation/vignette?name=${encodeURIComponent(name)}`;\r\n        const response = await fetch(url, {\r\n            method: 'POST'\r\n        });\r\n\r\n        if (response.ok) {\r\n            setVignette(name);\r\n            setMessages([]);\r\n        } else {\r\n            // Check for CORS issue\r\n            if (response.status === 0) {\r\n                console.error('Failed to update vignette: CORS issue detected.');\r\n            }\r\n            // Check for network problem\r\n            else if (!response.ok && !response.status) {\r\n                console.error('Failed to update vignette: Network error.');\r\n            } else {\r\n                // Other HTTP errors\r\n                const errorMessage = await response.text();\r\n                console.error(`Failed to update vignette: ${response.status} - ${errorMessage}`);\r\n            }\r\n        }\r\n    } catch (error) {\r\n        // Handle general errors\r\n        console.error('Error:', error.message);\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n  const sendMessage = async () => {\r\n    if (!input || !apiKey) return; // Check if input or apiKey is empty\r\n  \r\n    try {\r\n      const url = `https://llm-patient-simulation-backend.vercel.app/retrieve_answer?message=${encodeURIComponent(input)}&api_key=${apiKey}`;\r\n\r\n      const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n          'accept': 'application/json'\r\n        }\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        console.log(response);\r\n        throw new Error('Failed to retrieve answer');\r\n      }\r\n  \r\n      const data = await response.json();\r\n      setMessages([...messages, { user: 'Me', text: input }, { user: 'Bot', text: data.answer }]);\r\n      setInput('');\r\n      setError(null);\r\n      \r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  const renderMessage = (msg, index) => {\r\n    const isUser = msg.user === 'Me';\r\n    return (\r\n      <div key={index} className={`d-flex ${isUser ? 'justify-content-end' : 'justify-content-start'} my-2`}>\r\n        <div className={`p-2 rounded ${isUser ? 'bg-primary text-white' : 'bg-light text-dark'}`} style={{ maxWidth: '70%' }}>\r\n           {msg.text}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Function to handle API key input change\r\n  const handleApiKeyChange = (e) => {\r\n    setApiKey(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-fluid d-flex justify-content-center align-items-center\" style={{ height: '100vh', overflow: 'hidden' }}>\r\n      <div className=\"row\" style={{ width: \"80%\" }}>\r\n        <div className=\"col\">\r\n          <div className=\"h-100 d-flex flex-column justify-content-center align-items-center\">\r\n            <div>\r\n              <h4 style={{ margin: \"20px\" }}>Auswahl der Fallvignette</h4>\r\n              <div className =\"row\">\r\n                <button\r\n                  type=\"button\"\r\n                  className={`btn btn-lg ${vignette === 'Astrid Seeger' ? 'btn-primary' : 'btn-secondary'}`}\r\n                  onClick={() => handleButtonClick('Astrid Seeger')}\r\n                >\r\n                  Astrid Seeger\r\n                </button>\r\n                <button\r\n                  type=\"button\"\r\n                  className={`btn btn-lg ${vignette === 'Michael Schulze' ? 'btn-primary' : 'btn-secondary'}`}\r\n                  onClick={() => handleButtonClick('Michael Schulze')}\r\n                >\r\n                  Michael Schulze\r\n                </button>\r\n\r\n                <div className = \"row\">\r\n                  <div className=\"mb-3\">\r\n                    <label htmlFor=\"apiKeyInput\" className=\"form-label\"><h4 style={{ margin: \"20px\" }}>API Key</h4></label>\r\n                    <input type=\"text\" className=\"form-control\" id=\"apiKeyInput\" placeholder=\"Hier Key einfÃ¼gen\" value={apiKey} onChange={handleApiKeyChange}></input>\r\n                  </div>\r\n\r\n                </div>\r\n              </div>\r\n            </div>\r\n      \r\n          </div>\r\n        </div>\r\n        <div className=\"col-6\">\r\n          <div className=\"overflow-hidden\">\r\n            <div className=\"card\" style={{ overflowY: 'scroll', height: '100%', width : '100%'}}>\r\n              <div className=\"card-header\">\r\n                <h2>Chat </h2>\r\n              </div>\r\n              <div className=\"card-body d-flex flex-column\" style={{ height: '400px' }}>\r\n                <div className=\"mb-3 flex-grow-1\" style={{ overflowY: 'scroll', border: '1px solid #ccc', padding: '10px' }}>\r\n                  {messages.map((msg, index) => renderMessage(msg, index))}\r\n                </div>\r\n                <div className=\"input-group mb-3\">\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    value={input}\r\n                    onChange={(e) => setInput(e.target.value)}\r\n                    placeholder=\"Hier Nachricht eintragen..\"\r\n                  />\r\n                  <div className=\"input-group-append\">\r\n                    <button onClick={sendMessage} className=\"btn btn-primary\" disabled={!input || !apiKey}>Senden</button>\r\n                  </div>\r\n                </div>\r\n\r\n                {error && <div className=\"alert alert-danger mt-3\">{error}</div>}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n  \r\n};  \r\nexport default ChatWindow;","// src/App.js\nimport React from 'react';\nimport ChatWindow from './pages/ChatWindow';\nimport './App.css';\nimport { Routes, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Routes>\n      <Route path=\"/\" element={<ChatWindow />} />\n    </Routes>\n  );\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <Router basename=\"/llm-patient-simulation-frontend\">\n    <App />\n  </Router>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}