{"version":3,"sources":["pages/ChatWindow.js","App.js","reportWebVitals.js","index.js"],"names":["ChatWindow","messages","setMessages","useState","input","setInput","error","setError","systemPromptData","setSystemPromptData","currentPromptData","setCurrentPromptData","vignette","setVignette","fetchCurrentPromptData","async","response","fetch","method","headers","ok","Error","result","json","message","console","handleButtonClick","url","concat","encodeURIComponent","name","fetchSystemPromptData","useEffect","React","createElement","className","style","overflowY","minHeight","maxHeight","margin","type","onClick","role","height","border","padding","map","msg","index","renderMessage","isUser","user","key","maxWidth","text","value","onChange","e","target","placeholder","basicAuthChatWithPatient","localStorage","getItem","base64Credentials","split","credentials","atob","username","password","log","data","answer","App","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","Router"],"mappings":"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","file":"static/js/main.6a5f5e34.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst ChatWindow = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState('');\r\n  const [error, setError] = useState(null);\r\n  const [systemPromptData, setSystemPromptData] = useState(null);\r\n  const [currentPromptData, setCurrentPromptData] = useState(null);\r\n  const [vignette, setVignette] = useState('Astrid Seeger');\r\n\r\n  \r\n  const fetchCurrentPromptData = async () => {\r\n    try {\r\n      const response = await fetch('http://127.0.0.1:8000/conversation/current_prompt', {\r\n        method: 'GET',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n        },\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      const result = await response.json();\r\n      setCurrentPromptData(result.message);\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  };\r\n\r\n  const handleButtonClick = async (name) => {\r\n    try {\r\n        const url = `http://127.0.0.1:8000/conversation/vignette?name=${encodeURIComponent(name)}`;\r\n\r\n        const response = await fetch(url, {\r\n            method: 'POST'\r\n        });\r\n\r\n        if (response.ok) {\r\n            setVignette(name);\r\n            fetchSystemPromptData();\r\n            fetchCurrentPromptData();\r\n            setMessages([]);\r\n\r\n        } else {\r\n            console.error('Failed to update vignette');\r\n        }\r\n    } catch (error) {\r\n        console.error('Error:', error);\r\n    }\r\n};\r\n\r\nconst fetchSystemPromptData = async () => {\r\n  try {\r\n    const response = await fetch('http://127.0.0.1:8000/conversation/load_case_vignette', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n      },\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n    \r\n    const result = await response.json();\r\n    setSystemPromptData(result.message);\r\n  } catch (error) {\r\n    console.error('Error fetching data:', error);\r\n  }\r\n};\r\n\r\n  const sendMessage = async () => {\r\n    if (!input) return;\r\n  \r\n    try {\r\n      const basicAuthChatWithPatient = localStorage.getItem('basicAuthChatWithPatient');\r\n      if (!basicAuthChatWithPatient) {\r\n        throw new Error('Authentication token not found');\r\n      }\r\n      const base64Credentials = basicAuthChatWithPatient.split(' ')[1];\r\n      const credentials = atob(base64Credentials);\r\n      const [username, password] = credentials.split(':');\r\n\r\n      console.log('Username:', username); // Output: \"username\"\r\n      console.log('Password:', password); // Output: \"Password\r\n\r\n      const url = `http://127.0.0.1:8000/retrieve_answer?message=${encodeURIComponent(input)}`;\r\n\r\n      const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n          'accept': 'application/json'\r\n        }\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error('Failed to retrieve answer');\r\n      }\r\n  \r\n      const data = await response.json();\r\n      setMessages([...messages, { user: 'Me', text: input }, { user: 'Bot', text: data.answer }]);\r\n      setInput('');\r\n      fetchCurrentPromptData();\r\n      setError(null);\r\n      \r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchSystemPromptData();\r\n    fetchCurrentPromptData();\r\n  }, []);\r\n\r\n  const renderMessage = (msg, index) => {\r\n    const isUser = msg.user === 'Me';\r\n    return (\r\n      <div key={index} className={`d-flex ${isUser ? 'justify-content-end' : 'justify-content-start'} my-2`}>\r\n        <div className={`p-2 rounded ${isUser ? 'bg-primary text-white' : 'bg-light text-dark'}`} style={{ maxWidth: '70%' }}>\r\n           {msg.text}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"overflow-hidden\">\r\n      <div className=\"container mt-5\" style={ {overflowY : 'hidden', minHeight : \"100%\", maxHeight : '100%'}}>\r\n        <div className=\"row\">\r\n          <div className=\"col\">\r\n            <div className=\"h-100 d-flex flex-column justify-content-center align-items-center\">\r\n            <div>\r\n              \r\n              <h4 style={{margin : \"20px\"}}>Auswahl der Fallvignette</h4>\r\n              <div>\r\n              <button\r\n                type=\"button\"\r\n                className={`btn btn-lg ${vignette === 'Astrid Seeger' ? 'btn-primary' : 'btn-secondary'}`}\r\n                onClick={() => handleButtonClick('Astrid Seeger')}\r\n            >\r\n                Astrid Seeger\r\n            </button>\r\n            <button\r\n                type=\"button\"\r\n                className={`btn btn-lg ${vignette === 'Michael Schulze' ? 'btn-primary' : 'btn-secondary'}`}\r\n                onClick={() => handleButtonClick('Michael Schulze')}\r\n            >\r\n                Michael Schulze\r\n            </button>\r\n              </div>\r\n            </div>\r\n            <div className=\"card-columns\">\r\n                <div className=\"card\" style= {{margin : \"20px\"}}>\r\n                  <div className=\"card-body\">\r\n                    <h5 className=\"card-title\">Aktueller Prompt</h5>\r\n                    {currentPromptData ? (\r\n                      <p className=\"card-text\">{currentPromptData}</p>\r\n                    ) : (\r\n                      <div className=\"card-text\">\r\n\r\n                        <div className=\"spinner-border\" role=\"status\">\r\n                          <span className=\"visually-hidden\">Loading...</span>\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                \r\n                <div className=\"card p-3\" style= {{margin : \"20px\"}}>\r\n                  <div className=\"card-body\">\r\n                    <h5 className=\"card-title\">System Prompt</h5>\r\n                    {systemPromptData ? (\r\n                      <p className=\"card-text\">{systemPromptData}</p>\r\n                    ) : (\r\n                      <div className=\"card-text\">\r\n                        <div className=\"spinner-border\" role=\"status\">\r\n                          <span className=\"visually-hidden\">Loading...</span>\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-6\">\r\n           <div className=\"overflow-hidden\">\r\n            <div className=\"card\" style={ {overflowY : 'hidden', minHeight : \"100%\", maxHeight : '100%'}}>\r\n              <div className=\"card-header\">\r\n                <h2>Chat </h2>\r\n              </div>\r\n              <div className=\"card-body d-flex flex-column\" style={{ height : '400 px'}}>\r\n                <div className=\"mb-3 flex-grow-1\" style={{ overflowY: 'scroll', border: '1px solid #ccc', padding: '10px', minHeight: '400px' }}>\r\n                  {messages.map((msg, index) => renderMessage(msg, index))}\r\n                </div>\r\n                <div className=\"input-group mb-3\">\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    value={input}\r\n                    onChange={(e) => setInput(e.target.value)}\r\n                    placeholder=\"Hier Nachricht eintragen..\"\r\n                  />\r\n                  <div className=\"input-group-append\">\r\n                    <button onClick={sendMessage} className=\"btn btn-primary\">Senden</button>\r\n                  </div>\r\n                </div>\r\n                {error && <div className=\"alert alert-danger mt-3\">{error}</div>}\r\n                {/* {audioUrl && (\r\n                  <audio controls autoPlay>\r\n                    <source src={audioUrl} type=\"audio/mpeg\" />\r\n                  </audio>\r\n                )} */}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatWindow;","// src/App.js\nimport React from 'react';\nimport ChatWindow from './pages/ChatWindow';\nimport './App.css';\nimport { Routes, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Routes>\n      <Route path=\"/\" element={<ChatWindow />} />\n    </Routes>\n  );\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <Router>\n    <App />\n  </Router>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}